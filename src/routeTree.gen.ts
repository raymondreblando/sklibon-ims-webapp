/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainRouteImport } from './routes/_main'
import { Route as authIndexRouteImport } from './routes/(auth)/index'
import { Route as MainRequestTypesRouteImport } from './routes/_main/request-types'
import { Route as MainProfileRouteImport } from './routes/_main/profile'
import { Route as MainPositionsRouteImport } from './routes/_main/positions'
import { Route as MainDashboardRouteImport } from './routes/_main/dashboard'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'

const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const authIndexRoute = authIndexRouteImport.update({
  id: '/(auth)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRequestTypesRoute = MainRequestTypesRouteImport.update({
  id: '/request-types',
  path: '/request-types',
  getParentRoute: () => MainRoute,
} as any)
const MainProfileRoute = MainProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => MainRoute,
} as any)
const MainPositionsRoute = MainPositionsRouteImport.update({
  id: '/positions',
  path: '/positions',
  getParentRoute: () => MainRoute,
} as any)
const MainDashboardRoute = MainDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => MainRoute,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/register': typeof authRegisterRoute
  '/dashboard': typeof MainDashboardRoute
  '/positions': typeof MainPositionsRoute
  '/profile': typeof MainProfileRoute
  '/request-types': typeof MainRequestTypesRoute
  '/': typeof authIndexRoute
}
export interface FileRoutesByTo {
  '/register': typeof authRegisterRoute
  '/dashboard': typeof MainDashboardRoute
  '/positions': typeof MainPositionsRoute
  '/profile': typeof MainProfileRoute
  '/request-types': typeof MainRequestTypesRoute
  '/': typeof authIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteWithChildren
  '/(auth)/register': typeof authRegisterRoute
  '/_main/dashboard': typeof MainDashboardRoute
  '/_main/positions': typeof MainPositionsRoute
  '/_main/profile': typeof MainProfileRoute
  '/_main/request-types': typeof MainRequestTypesRoute
  '/(auth)/': typeof authIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/register'
    | '/dashboard'
    | '/positions'
    | '/profile'
    | '/request-types'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/register'
    | '/dashboard'
    | '/positions'
    | '/profile'
    | '/request-types'
    | '/'
  id:
    | '__root__'
    | '/_main'
    | '/(auth)/register'
    | '/_main/dashboard'
    | '/_main/positions'
    | '/_main/profile'
    | '/_main/request-types'
    | '/(auth)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
  authRegisterRoute: typeof authRegisterRoute
  authIndexRoute: typeof authIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/': {
      id: '/(auth)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/request-types': {
      id: '/_main/request-types'
      path: '/request-types'
      fullPath: '/request-types'
      preLoaderRoute: typeof MainRequestTypesRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/profile': {
      id: '/_main/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof MainProfileRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/positions': {
      id: '/_main/positions'
      path: '/positions'
      fullPath: '/positions'
      preLoaderRoute: typeof MainPositionsRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/dashboard': {
      id: '/_main/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof MainDashboardRouteImport
      parentRoute: typeof MainRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface MainRouteChildren {
  MainDashboardRoute: typeof MainDashboardRoute
  MainPositionsRoute: typeof MainPositionsRoute
  MainProfileRoute: typeof MainProfileRoute
  MainRequestTypesRoute: typeof MainRequestTypesRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainDashboardRoute: MainDashboardRoute,
  MainPositionsRoute: MainPositionsRoute,
  MainProfileRoute: MainProfileRoute,
  MainRequestTypesRoute: MainRequestTypesRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
  authRegisterRoute: authRegisterRoute,
  authIndexRoute: authIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
