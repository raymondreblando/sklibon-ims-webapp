/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainRouteImport } from './routes/_main'
import { Route as authIndexRouteImport } from './routes/(auth)/index'
import { Route as MainRequestTypesRouteImport } from './routes/_main/request-types'
import { Route as MainProfileRouteImport } from './routes/_main/profile'
import { Route as MainPositionsRouteImport } from './routes/_main/positions'
import { Route as MainHotlinesRouteImport } from './routes/_main/hotlines'
import { Route as MainDashboardRouteImport } from './routes/_main/dashboard'
import { Route as MainContactsRouteImport } from './routes/_main/contacts'
import { Route as guestLibonHotlinesRouteImport } from './routes/(guest)/libon-hotlines'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as MainUsersIndexRouteImport } from './routes/_main/users/index'
import { Route as MainUsersAddRouteImport } from './routes/_main/users/add'
import { Route as MainUsersUserIdViewRouteImport } from './routes/_main/users/$userId.view'
import { Route as MainUsersUserIdEditRouteImport } from './routes/_main/users/$userId.edit'

const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const authIndexRoute = authIndexRouteImport.update({
  id: '/(auth)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRequestTypesRoute = MainRequestTypesRouteImport.update({
  id: '/request-types',
  path: '/request-types',
  getParentRoute: () => MainRoute,
} as any)
const MainProfileRoute = MainProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => MainRoute,
} as any)
const MainPositionsRoute = MainPositionsRouteImport.update({
  id: '/positions',
  path: '/positions',
  getParentRoute: () => MainRoute,
} as any)
const MainHotlinesRoute = MainHotlinesRouteImport.update({
  id: '/hotlines',
  path: '/hotlines',
  getParentRoute: () => MainRoute,
} as any)
const MainDashboardRoute = MainDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => MainRoute,
} as any)
const MainContactsRoute = MainContactsRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => MainRoute,
} as any)
const guestLibonHotlinesRoute = guestLibonHotlinesRouteImport.update({
  id: '/(guest)/libon-hotlines',
  path: '/libon-hotlines',
  getParentRoute: () => rootRouteImport,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const MainUsersIndexRoute = MainUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => MainRoute,
} as any)
const MainUsersAddRoute = MainUsersAddRouteImport.update({
  id: '/users/add',
  path: '/users/add',
  getParentRoute: () => MainRoute,
} as any)
const MainUsersUserIdViewRoute = MainUsersUserIdViewRouteImport.update({
  id: '/users/$userId/view',
  path: '/users/$userId/view',
  getParentRoute: () => MainRoute,
} as any)
const MainUsersUserIdEditRoute = MainUsersUserIdEditRouteImport.update({
  id: '/users/$userId/edit',
  path: '/users/$userId/edit',
  getParentRoute: () => MainRoute,
} as any)

export interface FileRoutesByFullPath {
  '/register': typeof authRegisterRoute
  '/libon-hotlines': typeof guestLibonHotlinesRoute
  '/contacts': typeof MainContactsRoute
  '/dashboard': typeof MainDashboardRoute
  '/hotlines': typeof MainHotlinesRoute
  '/positions': typeof MainPositionsRoute
  '/profile': typeof MainProfileRoute
  '/request-types': typeof MainRequestTypesRoute
  '/': typeof authIndexRoute
  '/users/add': typeof MainUsersAddRoute
  '/users': typeof MainUsersIndexRoute
  '/users/$userId/edit': typeof MainUsersUserIdEditRoute
  '/users/$userId/view': typeof MainUsersUserIdViewRoute
}
export interface FileRoutesByTo {
  '/register': typeof authRegisterRoute
  '/libon-hotlines': typeof guestLibonHotlinesRoute
  '/contacts': typeof MainContactsRoute
  '/dashboard': typeof MainDashboardRoute
  '/hotlines': typeof MainHotlinesRoute
  '/positions': typeof MainPositionsRoute
  '/profile': typeof MainProfileRoute
  '/request-types': typeof MainRequestTypesRoute
  '/': typeof authIndexRoute
  '/users/add': typeof MainUsersAddRoute
  '/users': typeof MainUsersIndexRoute
  '/users/$userId/edit': typeof MainUsersUserIdEditRoute
  '/users/$userId/view': typeof MainUsersUserIdViewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteWithChildren
  '/(auth)/register': typeof authRegisterRoute
  '/(guest)/libon-hotlines': typeof guestLibonHotlinesRoute
  '/_main/contacts': typeof MainContactsRoute
  '/_main/dashboard': typeof MainDashboardRoute
  '/_main/hotlines': typeof MainHotlinesRoute
  '/_main/positions': typeof MainPositionsRoute
  '/_main/profile': typeof MainProfileRoute
  '/_main/request-types': typeof MainRequestTypesRoute
  '/(auth)/': typeof authIndexRoute
  '/_main/users/add': typeof MainUsersAddRoute
  '/_main/users/': typeof MainUsersIndexRoute
  '/_main/users/$userId/edit': typeof MainUsersUserIdEditRoute
  '/_main/users/$userId/view': typeof MainUsersUserIdViewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/register'
    | '/libon-hotlines'
    | '/contacts'
    | '/dashboard'
    | '/hotlines'
    | '/positions'
    | '/profile'
    | '/request-types'
    | '/'
    | '/users/add'
    | '/users'
    | '/users/$userId/edit'
    | '/users/$userId/view'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/register'
    | '/libon-hotlines'
    | '/contacts'
    | '/dashboard'
    | '/hotlines'
    | '/positions'
    | '/profile'
    | '/request-types'
    | '/'
    | '/users/add'
    | '/users'
    | '/users/$userId/edit'
    | '/users/$userId/view'
  id:
    | '__root__'
    | '/_main'
    | '/(auth)/register'
    | '/(guest)/libon-hotlines'
    | '/_main/contacts'
    | '/_main/dashboard'
    | '/_main/hotlines'
    | '/_main/positions'
    | '/_main/profile'
    | '/_main/request-types'
    | '/(auth)/'
    | '/_main/users/add'
    | '/_main/users/'
    | '/_main/users/$userId/edit'
    | '/_main/users/$userId/view'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
  authRegisterRoute: typeof authRegisterRoute
  guestLibonHotlinesRoute: typeof guestLibonHotlinesRoute
  authIndexRoute: typeof authIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/': {
      id: '/(auth)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/request-types': {
      id: '/_main/request-types'
      path: '/request-types'
      fullPath: '/request-types'
      preLoaderRoute: typeof MainRequestTypesRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/profile': {
      id: '/_main/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof MainProfileRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/positions': {
      id: '/_main/positions'
      path: '/positions'
      fullPath: '/positions'
      preLoaderRoute: typeof MainPositionsRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/hotlines': {
      id: '/_main/hotlines'
      path: '/hotlines'
      fullPath: '/hotlines'
      preLoaderRoute: typeof MainHotlinesRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/dashboard': {
      id: '/_main/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof MainDashboardRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/contacts': {
      id: '/_main/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof MainContactsRouteImport
      parentRoute: typeof MainRoute
    }
    '/(guest)/libon-hotlines': {
      id: '/(guest)/libon-hotlines'
      path: '/libon-hotlines'
      fullPath: '/libon-hotlines'
      preLoaderRoute: typeof guestLibonHotlinesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/users/': {
      id: '/_main/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof MainUsersIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/users/add': {
      id: '/_main/users/add'
      path: '/users/add'
      fullPath: '/users/add'
      preLoaderRoute: typeof MainUsersAddRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/users/$userId/view': {
      id: '/_main/users/$userId/view'
      path: '/users/$userId/view'
      fullPath: '/users/$userId/view'
      preLoaderRoute: typeof MainUsersUserIdViewRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/users/$userId/edit': {
      id: '/_main/users/$userId/edit'
      path: '/users/$userId/edit'
      fullPath: '/users/$userId/edit'
      preLoaderRoute: typeof MainUsersUserIdEditRouteImport
      parentRoute: typeof MainRoute
    }
  }
}

interface MainRouteChildren {
  MainContactsRoute: typeof MainContactsRoute
  MainDashboardRoute: typeof MainDashboardRoute
  MainHotlinesRoute: typeof MainHotlinesRoute
  MainPositionsRoute: typeof MainPositionsRoute
  MainProfileRoute: typeof MainProfileRoute
  MainRequestTypesRoute: typeof MainRequestTypesRoute
  MainUsersAddRoute: typeof MainUsersAddRoute
  MainUsersIndexRoute: typeof MainUsersIndexRoute
  MainUsersUserIdEditRoute: typeof MainUsersUserIdEditRoute
  MainUsersUserIdViewRoute: typeof MainUsersUserIdViewRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainContactsRoute: MainContactsRoute,
  MainDashboardRoute: MainDashboardRoute,
  MainHotlinesRoute: MainHotlinesRoute,
  MainPositionsRoute: MainPositionsRoute,
  MainProfileRoute: MainProfileRoute,
  MainRequestTypesRoute: MainRequestTypesRoute,
  MainUsersAddRoute: MainUsersAddRoute,
  MainUsersIndexRoute: MainUsersIndexRoute,
  MainUsersUserIdEditRoute: MainUsersUserIdEditRoute,
  MainUsersUserIdViewRoute: MainUsersUserIdViewRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
  authRegisterRoute: authRegisterRoute,
  guestLibonHotlinesRoute: guestLibonHotlinesRoute,
  authIndexRoute: authIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
